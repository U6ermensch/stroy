import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.error import TimedOut, NetworkError
from config import BOT_TOKEN, STORE_NAME, WORKING_HOURS, ADDRESS, CONTACT_PHONE, ADMIN_IDS
from database import get_session, get_products, get_categories, add_product, update_product, add_category, update_category, delete_category
from models import Product, Category
import asyncio
from sqlalchemy import select
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.error import TimedOut, NetworkError
from config import BOT_TOKEN, STORE_NAME, WORKING_HOURS, ADDRESS, CONTACT_PHONE, ADMIN_IDS
from database import get_session, get_products, get_categories, add_product, update_product, add_category, update_category, delete_category
from models import Product, Category
import asyncio
from sqlalchemy import select

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    keyboard = [
        [
            InlineKeyboardButton("üìã –ö–ê–¢–ê–õ–û–ì", callback_data='catalog'),
            InlineKeyboardButton("üí∞ –û–ü–¢", callback_data='opt')
        ],
        [
            InlineKeyboardButton("üîç –ü–û–ò–°–ö", callback_data='search'),
            InlineKeyboardButton("‚ÑπÔ∏è –û –ù–ê–°", callback_data='about')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {STORE_NAME}! üëã\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:',
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button callbacks."""
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == 'catalog':
            await show_catalog(query)
        elif query.data == 'opt':
            await show_opt(query)
        elif query.data == 'about':
            await show_about(query)
        elif query.data == 'search':
            await start_search(query)
        elif query.data == 'start':
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                [
                    InlineKeyboardButton("üìã –ö–ê–¢–ê–õ–û–ì", callback_data='catalog'),
                    InlineKeyboardButton("üí∞ –û–ü–¢", callback_data='opt')
                ],
                [
                    InlineKeyboardButton("üîç –ü–û–ò–°–ö", callback_data='search'),
                    InlineKeyboardButton("‚ÑπÔ∏è –û –ù–ê–°", callback_data='about')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {STORE_NAME}! üëã\n\n'
                     '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:',
                reply_markup=reply_markup
            )
        elif query.data.startswith('category_'):
            try:
                category_id = int(query.data.split('_')[1])
                print(f"Opening category with ID: {category_id}")
                await show_products(query, category_id)
            except ValueError as e:
                print(f"Error parsing category ID: {e}")
                await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", show_alert=True)
            except Exception as e:
                print(f"Error showing products: {e}")
                await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)
        elif query.data.startswith('order_'):
            try:
                product_id = int(query.data.split('_')[1])
                await query.answer("–î–ª—è –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", show_alert=True)
            except Exception as e:
                print(f"Error processing order: {e}")
                await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    except Exception as e:
        print(f"Error in button_handler: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        try:
            keyboard = [
                [
                    InlineKeyboardButton("üìã –ö–ê–¢–ê–õ–û–ì", callback_data='catalog'),
                    InlineKeyboardButton("üí∞ –û–ü–¢", callback_data='opt')
                ],
                [
                    InlineKeyboardButton("üîç –ü–û–ò–°–ö", callback_data='search'),
                    InlineKeyboardButton("‚ÑπÔ∏è –û –ù–ê–°", callback_data='about')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n'
                     '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:',
                reply_markup=reply_markup
            )
        except Exception as edit_error:
            print(f"Error editing message: {edit_error}")

async def show_catalog(query):
    """Show the product catalog with categories."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async for session in get_session():
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = await get_categories(session)
            
            if not categories:
                message = "–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
                keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data='start')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text=message, reply_markup=reply_markup)
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for category in categories:
                # –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
                keyboard.append([
                    InlineKeyboardButton(category.name, callback_data=f"category_{category.id}")
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data='start')])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text="üèó *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
    except Exception as e:
        print(f"Error in show_catalog: {e}")
        message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data='start')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message, reply_markup=reply_markup)

async def show_products(query, category_id: int):
    """Show products in a specific category."""
    try:
        async for session in get_session():
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            stmt = select(Category).where(Category.id == category_id)
            result = await session.execute(stmt)
            category = result.scalar_one_or_none()
            
            if not category:
                await query.edit_message_text(
                    text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data='catalog')]])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            products = await get_products(session, category_id)
            
            if not products:
                await query.edit_message_text(
                    text=f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category.name}¬ª –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data='catalog')]])
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await query.edit_message_text(
                text=f"*{category.name}*\n\n–¢–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data='catalog')]])
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for product in products:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text = (
                    f"*{product.name}*\n\n"
                    f"{product.description}\n\n"
                    f"üí∞ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
                    f"ID —Ç–æ–≤–∞—Ä–∞: {product.id}"
                )
                
                try:
                    if product.image_url:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        image_url = product.image_url
                        if not image_url.startswith(('http://', 'https://')):
                            image_url = 'https://' + image_url.lstrip('/')
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                        await query.message.reply_photo(
                            photo=image_url,
                            caption=message_text,
                            parse_mode="Markdown"
                        )
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        await query.message.reply_text(
                            text=message_text,
                            parse_mode="Markdown"
                        )
                except Exception as e:
                    print(f"Error sending product {product.id}: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
                    await query.message.reply_text(
                        text=message_text,
                        parse_mode="Markdown"
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            await query.message.reply_text(
                text="–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î –í –ö–ê–¢–ê–õ–û–ì", callback_data='catalog')]])
            )
            
    except Exception as e:
        print(f"Error in show_products: {e}")
        try:
            await query.edit_message_text(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data='catalog')]])
            )
        except Exception as edit_error:
            print(f"Error editing message: {edit_error}")
            try:
                await query.message.reply_text(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data='catalog')]])
                )
            except Exception as reply_error:
                print(f"Error sending error message: {reply_error}")

async def show_opt(query):
    """Show wholesale pricing information."""
    message = f"üí∞ *–û–ø—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã*\n\n"
    message += f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ç–æ–≤—ã—Ö —Ü–µ–Ω –∏ —É—Å–ª–æ–≤–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n\n"
    message += f"üìû {CONTACT_PHONE}\n\n"
    message += f"–∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –ø–æ –∞–¥—Ä–µ—Å—É:\n\n"
    message += f"üìç {ADDRESS}"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î –í –ú–ï–ù–Æ", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message, reply_markup=reply_markup, parse_mode="Markdown")

async def show_working_hours(query):
    """Show working hours."""
    message = f"üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n\n{WORKING_HOURS}\n\n"
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î –í –ú–ï–ù–Æ", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message, reply_markup=reply_markup)

async def show_location(query):
    """Show store location."""
    message = f"üìç –ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞:\n\n{ADDRESS}\n\n"
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î –í –ú–ï–ù–Æ", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message, reply_markup=reply_markup)

async def show_contacts(query):
    """Show contact information."""
    message = f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
    message += f"–¢–µ–ª–µ—Ñ–æ–Ω: {CONTACT_PHONE}\n"
    message += f"–ê–¥—Ä–µ—Å: {ADDRESS}\n\n"
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î –í –ú–ï–ù–Æ", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message, reply_markup=reply_markup)

async def show_about(query):
    """Show about information."""
    message = f"‚ÑπÔ∏è *–û –Ω–∞—Å*\n\n"
    message += f"–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å {WORKING_HOURS} –∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\n\n"
    message += f"üìç [{ADDRESS}](https://2gis.ru/irkutsk/search/–º–∞—Å—Ç–µ—Ä/firm/70000001041280291?m=104.176233%2C52.347187%2F14.69)\n\n"
    message += f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n\n"
    message += f"üìû {CONTACT_PHONE}"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î –í –ú–ï–ù–Æ", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message, reply_markup=reply_markup, parse_mode="Markdown", disable_web_page_preview=False)

async def add_product_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Add a new product to the database."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        if not args:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_product –Ω–∞–∑–≤–∞–Ω–∏–µ|–æ–ø–∏—Å–∞–Ω–∏–µ|—Ü–µ–Ω–∞|id_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏|—Å—Å—ã–ª–∫–∞_–Ω–∞_—Ñ–æ—Ç–æ\n"
                "–ü—Ä–∏–º–µ—Ä: /add_product –ö–∏—Ä–ø–∏—á –∫—Ä–∞—Å–Ω—ã–π|–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–∏—Ä–ø–∏—á –∫—Ä–∞—Å–Ω—ã–π|15.50|1|https://example.com/photo.jpg"
            )
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é |
        command_text = ' '.join(args)
        parts = command_text.split('|')
        
        if len(parts) < 4:
            await update.message.reply_text(
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_product –Ω–∞–∑–≤–∞–Ω–∏–µ|–æ–ø–∏—Å–∞–Ω–∏–µ|—Ü–µ–Ω–∞|id_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏|—Å—Å—ã–ª–∫–∞_–Ω–∞_—Ñ–æ—Ç–æ\n"
                "–ü—Ä–∏–º–µ—Ä: /add_product –ö–∏—Ä–ø–∏—á –∫—Ä–∞—Å–Ω—ã–π|–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–∏—Ä–ø–∏—á –∫—Ä–∞—Å–Ω—ã–π|15.50|1|https://example.com/photo.jpg"
            )
            return
        
        name = parts[0].strip()
        description = parts[1].strip()
        price = float(parts[2].strip())
        category_id = int(parts[3].strip())
        image_url = parts[4].strip() if len(parts) > 4 else None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        async for session in get_session():
            stmt = select(Category).where(Category.id == category_id)
            result = await session.execute(stmt)
            category = result.scalar_one_or_none()
            
            if not category:
                await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
            product = await add_product(session, name, description, price, category_id, image_url)
            
            if product:
                await update.message.reply_text(
                    f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"
                    f"üí∞ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
                    f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                    f"üñº –§–æ—Ç–æ: {'–ï—Å—Ç—å' if product.image_url else '–ù–µ—Ç'}"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")
    except ValueError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    except Exception as e:
        print(f"Error in add_product_command: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")

async def update_product_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Update product price (admin only)."""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # Format: /update_product product_id|price
        args = context.args[0].split('|')
        if len(args) != 2:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /update_product product_id|price"
            )
            return

        product_id, price = args
        async for session in get_session():
            product = await update_product(
                session,
                int(product_id),
                price=float(price)
            )
            if product:
                await update.message.reply_text(f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ '{product.name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            else:
                await update.message.reply_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {str(e)}")

async def list_categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all categories with their IDs."""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    async for session in get_session():
        categories = await get_categories(session)
        if not categories:
            await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        message = "üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n"
        for category in categories:
            message += f"ID: {category.id} - {category.name}\n"
            if category.description:
                message += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {category.description}\n"
            message += "\n"
        
        await update.message.reply_text(message)

async def add_category_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Add a new category."""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # Format: /add_category name|description
        args = context.args[0].split('|')
        if len(args) < 1:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_category name|description"
            )
            return
        
        name = args[0]
        description = args[1] if len(args) > 1 else None
        
        async for session in get_session():
            category = await add_category(session, name=name, description=description)
            await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: {category.id}!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")

async def update_category_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Update a category."""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # Format: /update_category id|name|description
        args = context.args[0].split('|')
        if len(args) < 2:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /update_category id|name|description"
            )
            return
        
        category_id = int(args[0])
        name = args[1]
        description = args[2] if len(args) > 2 else None
        
        async for session in get_session():
            category = await update_category(
                session,
                category_id,
                name=name,
                description=description
            )
            if category:
                await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            else:
                await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")

async def delete_category_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Delete a category."""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # Format: /delete_category id
        if not context.args:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_category id"
            )
            return
        
        category_id = int(context.args[0])
        
        async for session in get_session():
            success = await delete_category(session, category_id)
            if success:
                await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {category_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
            else:
                await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")

async def delete_product_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Delete a product by ID."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_product id_—Ç–æ–≤–∞—Ä–∞\n"
                "–ü—Ä–∏–º–µ—Ä: /delete_product 1"
            )
            return
        
        product_id = int(context.args[0])
        
        async for session in get_session():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            stmt = select(Product).where(Product.id == product_id)
            result = await session.execute(stmt)
            product = result.scalar_one_or_none()
            
            if not product:
                await update.message.reply_text(f"‚ùå –¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
            await session.delete(product)
            await session.commit()
            
            await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä '{product.name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        print(f"Error in delete_product_command: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors."""
    logger.error(f"Update {update} caused error {context.error}")
    
    if isinstance(context.error, TimedOut):
        logger.info("Connection timed out. Waiting before retry...")
        await asyncio.sleep(5)  # Wait 5 seconds before retrying
        return
        
    if isinstance(context.error, NetworkError):
        logger.info("Network error occurred. Waiting before retry...")
        await asyncio.sleep(5)  # Wait 5 seconds before retrying
        return
        
    if "Conflict: terminated by other getUpdates request" in str(context.error):
        logger.error("Another bot instance is running. Please stop other instances first.")
        import sys
        sys.exit(1)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –æ—à–∏–±–∫–æ–π

async def start_search(query):
    """Start the search process."""
    message = "üîç *–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤*\n\n"
    message += "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–µ—Ç–µ.\n"
    message += "–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∏—Ä–ø–∏—á, —Ü–µ–º–µ–Ω—Ç, –∫—Ä–∞—Å–∫–∞ –∏ —Ç.–¥."
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î –í –ú–ï–ù–Æ", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    context = query.get_bot().context
    context.user_data['waiting_for_search'] = True

async def search_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Search for products based on user input."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if not context.user_data.get('waiting_for_search', False):
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['waiting_for_search'] = False
    
    search_query = update.message.text.lower()
    
    try:
        async for session in get_session():
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
            products = await get_products(session)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            found_products = []
            for product in products:
                if (search_query in product.name.lower() or 
                    search_query in product.description.lower()):
                    found_products.append(product)
            
            if not found_products:
                await update.message.reply_text(
                    "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–∞—Ç–∞–ª–æ–≥.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î –í –ú–ï–ù–Æ", callback_data='start')]])
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
            await update.message.reply_text(
                f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {search_query}*\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(found_products)}",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î –í –ú–ï–ù–Æ", callback_data='start')]])
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for product in found_products:
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞
                stmt = select(Category).where(Category.id == product.category_id)
                result = await session.execute(stmt)
                category = result.scalar_one_or_none()
                category_name = category.name if category else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text = (
                    f"*{product.name}*\n\n"
                    f"{product.description}\n\n"
                    f"üí∞ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
                    f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
                    f"ID —Ç–æ–≤–∞—Ä–∞: {product.id}"
                )
                
                try:
                    if product.image_url:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        image_url = product.image_url
                        if not image_url.startswith(('http://', 'https://')):
                            image_url = 'https://' + image_url.lstrip('/')
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                        await update.message.reply_photo(
                            photo=image_url,
                            caption=message_text,
                            parse_mode="Markdown"
                        )
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        await update.message.reply_text(
                            text=message_text,
                            parse_mode="Markdown"
                        )
                except Exception as e:
                    print(f"Error sending product {product.id}: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
                    await update.message.reply_text(
                        text=message_text,
                        parse_mode="Markdown"
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            await update.message.reply_text(
                text="–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î –í –ú–ï–ù–Æ", callback_data='start')]])
            )
            
    except Exception as e:
        print(f"Error in search_products: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î –í –ú–ï–ù–Æ", callback_data='start')]])
        )

def main():
    """Start the bot."""
    try:
        # Create the Application and pass it your bot's token
        application = Application.builder().token(BOT_TOKEN).build()

        # Add handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("add_product", add_product_command))
        application.add_handler(CommandHandler("update_product", update_product_command))
        application.add_handler(CommandHandler("delete_product", delete_product_command))
        application.add_handler(CommandHandler("list_categories", list_categories_command))
        application.add_handler(CommandHandler("add_category", add_category_command))
        application.add_handler(CommandHandler("update_category", update_category_command))
        application.add_handler(CommandHandler("delete_category", delete_category_command))
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_products))
        
        # Add error handler
        application.add_error_handler(error_handler)

        # Start the Bot with increased timeout
        logger.info("Starting bot...")
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            read_timeout=30,
            write_timeout=30,
            connect_timeout=30,
            pool_timeout=30
        )
    except Exception as e:
        logger.error(f"Critical error: {e}")
        import sys
        sys.exit(1)

if __name__ == '__main__':
    main() 